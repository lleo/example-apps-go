// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package keyval

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PutReq struct {
	_tab flatbuffers.Table
}

func GetRootAsPutReq(buf []byte, offset flatbuffers.UOffsetT) *PutReq {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PutReq{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PutReq) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PutReq) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PutReq) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PutReq) Val() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PutReqStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PutReqAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func PutReqAddVal(builder *flatbuffers.Builder, val flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(val), 0)
}
func PutReqEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
