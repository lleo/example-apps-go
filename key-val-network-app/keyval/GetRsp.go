// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package keyval

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetRsp struct {
	_tab flatbuffers.Table
}

func GetRootAsGetRsp(buf []byte, offset flatbuffers.UOffsetT) *GetRsp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetRsp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *GetRsp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetRsp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetRsp) Exists() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetRsp) MutateExists(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *GetRsp) Val() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func GetRspStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func GetRspAddExists(builder *flatbuffers.Builder, exists byte) {
	builder.PrependByteSlot(0, exists, 0)
}
func GetRspAddVal(builder *flatbuffers.Builder, val flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(val), 0)
}
func GetRspEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
